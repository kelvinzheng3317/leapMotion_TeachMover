Notes:

The leap code uses the leapc_python_binding repo to enable coding with Leap Motion in python, getting this repo to work involves running the following commands:
```
# Create and activate a virtual environment
pip install -r requirements.txt
pip install -e leapc-python-api
```
sometimes this virtual environment is destroyed, and when this happens, these commands have to be rerun

Robot default position - this can be manually set using robot.set_motor_vals(1768, 1100, 1040, 0, 0, 750) but will automatically be done via __init__
    - base: 1768
    - shoulder: 1100
    - elbow: 1040
    - up/down wrist: 420 
    - right wrist:
    - gripper: 750

TODO:
    - fix gripper opening as you go up
        - if u add diff3 to diff6, the grip will open as the elbow goes inward
        - if u don't add diff3 to diff6, the grip will open as the elbow goes outward
    - fix difficult moving close to the table due to the leapmotion struggling to detect your hand once you get close to it
        - Leapmotion coordinates aren't matching robot coordinates, sometimes the robot would be close to the table when z=0 and then later on be the same distance when z=-6 
    - look into kalman filter

- figure out valid range of values for x,y,z
    -IK - x: 2 to 10, y: -10 to 10, z: 0.5 to 19
    -camera - x, y: -200 to 200

move() makes gripper close as elbow goes up and closes as elbow goes down
set_step() has the gripper remain the same as elbow goes down but messes up m3 making returnToStart() widen the gripper
set_step() makes the gripper open as the elbow goes up and then messes up m3 making returnToStart() also widen the gripper

Idea: create a new thread that has a run() function that runs the TeachMover command and finishes once it gets a response from the TeachMover.
Then implement a mutex so that only one thread can exist at any time. 

Inversed kinematics notes:
- Set limits on the magnitude of @STEP commands can go through in order to protect the robot from going into unsafe positions
- Set the robot reference point to the wrist instead of the center of the gripper makes things easier.
- Solve for steps you need on the robot -> subtract robot's current step -> move this difference
- coordinate system for leapmotion doesnt' match the coordinate system for the robot so u have to convert it

Possible gestures (note that inversed kinematics might still be chosen over this)
	- OK: position of thumb and index are close, others are not
	- V: difference in direction of pointer and middle on the plane orthogonal to the palm vector is large enough
	- 4: thumb also 0 away from while other 4 fingers directonal vectors are relatively orthogonal to the palm vector
	- fist: every finger but thumb is close to palm
		- thumbs up: don't use if not needed, pretty similar to fist
	- 0: position of all fingertips are close together and far from palm
	- L: difference in direction vector of thumb and index is great enough
	- pointing
	- spiderman
	- 6

TeachMover
    @STEP(Speed, Base, Shoulder, Elbow, Paw, WristRotation, Gripper)
        - Base: right(+) left(-)
        - Shoulder: forward(+) backwards(-)
        - Elbow: down(+) up(-)
        - Paw: gripper down(+) up(-)
        - Wrist: counterclockwise(+) clockwise(-)
        - Gripper: open(+) close(-)

my leapTest2.py code currently only listens for tracking events, not all events

Hand attributes:
    .id:  hand id
    .type:  "HandType.Left" or "HandType.Right"
    .palm: represents hand's palm, use this for postional data most of the time
        .position[x]:  vector position of palm. Has x,y,z components
    .digits[digit_indx]:  this represents fingers
        .distal:  1rst segment of finger
        .intermediate: 2nd segment of finger
        .proximal: 3rd segment of finger
        .metacarpal: 4th segment of finger (in palm)
            .rotation:  Quaternion object for rotation of specific finger bone
            .next_joint: position of the finger?
                .x, .y, .z attributes for specific directions


OLD MOVEMENT BASIC MOVEMENT CODE THAT DOESN'T USE INVERSE kinematics
# xChange, yChange, zChange = 0, 0, 0
                    # if (diffX > 50):
                    #     print("moving right")
                    #     xChange = 100
                    # elif (diffX < -50):
                    #     print("moving left")
                    #     xChange = -100

                    # if (diffY > 50):
                    #     print("moving up")
                    #     yChange = -100
                    # elif (diffY < -50):
                    #     print("moving down")
                    #     yChange = 100
                    
                    # if (diffZ > 50):
                    #     print("moving forward")
                    #     zChange = 100
                    # elif (diffZ < -50):
                    #     print("moving backwards")
                    #     zChange = -100

                    # if (xChange != 0 or yChange != 0 or zChange != 0):
                    #     robot.move(200, xChange, yChange, zChange, 0, 0, 0)