Notes:

The leap code uses the leapc_python_binding repo to enable coding with Leap Motion in python, getting this repo to work involves running the following commands:
```
# Create and activate a virtual environment
pip install -r requirements.txt
pip install -e leapc-python-api
```
I believe this virtual environment is destroyed everytime the project is closed out so these commands have to be rerun every time but not sure

my leapTest2.py code currently only listens for tracking events, not all events

TODO:
    - study inverse kinematics
    - Fix pinching and O position being too similar
    - Fix TeachMover.reset() and TeachMover.read() not working

Idea: create a new thread that has a run() function that runs the TeachMover command and finishes once it gets a response from the TeachMover.
Then implement a mutex so that only one thread can exist at any time. 

Inversed kinematics notes:
- Set limits on the magnitude of @STEP commands can go through in order to protect the robot from going into unsafe positions
- Set the robot reference point to the wrist instead of the center of the gripper makes things easier.
- Solve for steps you need on the robot -> subtract robot's current step -> move this difference
- coordinate system for leapmotion doesnt' match the coordinate system for the robot so u have to convert it

Possible gestures (note that inversed kinematics might still be chosen over this)
	- OK: position of thumb and index are close, others are not
	- V: difference in direction of pointer and middle on the plane orthogonal to the palm vector is large enough
	- 4: thumb also 0 away from while other 4 fingers directonal vectors are relatively orthogonal to the palm vector
	- fist: every finger but thumb is close to palm
		- thumbs up: don't use if not needed, pretty similar to fist
	- 0: position of all fingertips are close together and far from palm
	- L: difference in direction vector of thumb and index is great enough
	- pointing
	- spiderman
	- 6

TeachMover
    @STEP(Speed, Base, Shoulder, Elbow, Paw, WristRotation, Gripper)
        - Base: right(+) left(-)
        - Shoulder: forward(+) backwards(-)
        - Elbow: down(+) up(-)
        - Paw: gripper down(+) up(-)
        - Wrist: counterclockwise(+) clockwise(-)
        - Gripper: open(+) close(-)


Hand attributes:
    .id:  hand id
    .type:  "HandType.Left" or "HandType.Right"
    .palm: represents hand's palm, use this for postional data most of the time
        .position[x]:  vector position of palm. Has x,y,z components
    .digits[digit_indx]:  this represents fingers
        .distal:  1rst segment of finger
        .intermediate: 2nd segment of finger
        .proximal: 3rd segment of finger
        .metacarpal: 4th segment of finger (in palm)
            .rotation:  Quaternion object for rotation of specific finger bone
            .next_joint: position of the finger?
                .x, .y, .z attributes for specific directions